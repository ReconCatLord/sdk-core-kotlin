package network.xyo.sdkcorekotlin.boundWitness

import kotlinx.coroutines.runBlocking
import network.xyo.sdkcorekotlin.XyoTestBase
import network.xyo.sdkcorekotlin.hashing.basic.XyoBasicHashBase
import network.xyo.sdkcorekotlin.schemas.XyoSchemas
import network.xyo.sdkobjectmodelkotlin.objects.sets.XyoIterableObject
import org.junit.Assert
import org.junit.Test
import java.math.BigInteger

class XyoBoundWitnessInterpretTest : XyoTestBase() {

    @Test
    fun testInterpreterBoundWitness () {
        val boundWitnessBytes = BigIntegertoByteArray()
        val createdBoundWitness = XyoBoundWitness.getInstance(boundWitnessBytes.copyOfRange(1, boundWitnessBytes.size))

        Assert.assertEquals(2, XyoIterableObject(createdBoundWitness.publicKeys).size)
        Assert.assertEquals(2, XyoIterableObject(createdBoundWitness.payloads).size)
        Assert.assertEquals(2, XyoIterableObject(createdBoundWitness.signatures).size)
    }

    @Test
    fun testBoundWitnessHash () {
        runBlocking {
            val boundWitnessHash = BigInteger("801000000024D2C81E30305CADA018E449414B2973B3537F2DEED741271BF46C146D314E0288", 16).toByteArray()
            val boundWitnessBytes = BigIntegertoByteArray()
            val createdBoundWitness = XyoBoundWitness.getInstance(boundWitnessBytes.copyOfRange(1, boundWitnessBytes.size))

            val hash = createdBoundWitness.getHash(XyoBasicHashBase.createHashType(XyoSchemas.SHA_256, "SHA-256")).await().self
            Assert.assertArrayEquals(boundWitnessHash.copyOfRange(1, boundWitnessHash.size), hash)
        }
    }
}