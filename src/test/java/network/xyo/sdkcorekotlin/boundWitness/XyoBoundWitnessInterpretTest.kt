package network.xyo.sdkcorekotlin.boundWitness

import kotlinx.coroutines.runBlocking
import network.xyo.sdkcorekotlin.XyoTestBase
import network.xyo.sdkcorekotlin.hashing.basic.XyoBasicHashBase
import network.xyo.sdkcorekotlin.schemas.XyoSchemas
import network.xyo.sdkobjectmodelkotlin.objects.sets.XyoIterableObject
import org.junit.Assert
import org.junit.Test
import java.math.BigInteger

class XyoBoundWitnessInterpretTest : XyoTestBase() {

    @Test
    fun testInterpreterBoundWitness () {
        val boundWitnessBytes = BigIntegertoByteArray()
        val createdBoundWitness = XyoBoundWitness.getInstance(boundWitnessBytes.copyOfRange(1, boundWitnessBytes.size))

        Assert.assertEquals(2, XyoIterableObject(createdBoundWitness.publicKeys).size)
        Assert.assertEquals(2, XyoIterableObject(createdBoundWitness.payloads).size)
        Assert.assertEquals(2, XyoIterableObject(createdBoundWitness.signatures).size)
    }

    @Test
    fun testBoundWitnessHash () {
        runBlocking {
            val boundWitnessHash = BigInteger("801200000024F7896D125FFECFA65BD127DC9782010D66B41FA6CA7D473199ACFFB5E3D9581D", 16).toByteArray()
            val boundWitnessBytes = BigInteger("A00200000167B0010000009AA0040000004A800E00000044EA8CBD65E1C9E2EA2511C5733C8147848BFFFE2185BF3D00B4A3D6111773D98AA6E34B46F98E063A95055375BAACA30BA08702783EC478CCA90341B0B4DA0DFE0000004A800E0000004428453B571745EBCD4254A9AFBDC5CDE0FEF951EF4873D1EFFF174FCCCAF855A68ECD84DCBC60200DACA44FFA60A5BC3CB88B4A3039D430AC2CDD0B26C66F490BB00100000022B0080000000EA00100000004000000040000000EA0010000000400000004B001000000A1A00A0000004D800B00000047201D82E7B8AC99878AFEDB1C7865D5A8503452AA625903F78E376A7CC74FCA14C62100F56BDDE48E32AFC42A6B40FA42CD1E09D98C94E6BF15CB59B11CC8D015CC49700000004E800B000000482100D48A81F1A8FCA38054177216E860D8AAF007C454461270455F4D0557F2C461BA2100CD7AD6A9097469B6E00E930E5B0783E9C0D62A5F6D93940340E887B668D588BD", 16).toByteArray()
            val createdBoundWitness = XyoBoundWitness.getInstance(boundWitnessBytes.copyOfRange(1, boundWitnessBytes.size))

            val hash = createdBoundWitness.getHash(XyoBasicHashBase.createHashType(XyoSchemas.SHA_256, "SHA-256")).await().self
            Assert.assertArrayEquals(boundWitnessHash.copyOfRange(1, boundWitnessHash.size), hash)
        }
    }
}